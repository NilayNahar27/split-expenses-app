<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Split Expense App</title>
  <link rel="stylesheet" href="/style.css">
</head>
<body>
  <div class="container">
    <h1>Split Expense App</h1>
    
    <!-- Add Expense Form -->
    <form id="expenseForm">
      <input type="text" id="description" placeholder="Description" required>
      <input type="number" id="amount" placeholder="Amount (₹)" required step="0.01">
      <input type="text" id="paidBy" placeholder="Paid by" required>
      <input type="text" id="participants" placeholder="Participants (comma-separated)" required>
      <button type="submit">Add Expense</button>
    </form>

    <!-- Expenses List -->
    <h2>Expenses</h2>
    <ul id="expenseList">
      <% expenses.forEach(expense => { %>
        <li>
          <%= expense.description %>: ₹<%= expense.amount.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) %> 
          (Paid by <%= expense.paidBy %>)
          <button class="delete-btn" data-id="<%= expense._id %>">Delete</button>
          <ul>
            <% expense.participants.forEach(p => { %>
              <li>
                <%= p.user %> owes: ₹<%= typeof p.share === 'number' && !isNaN(p.share) ? p.share.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) : 'N/A' %>
              </li>
            <% }) %>
          </ul>
        </li>
      <% }) %>
    </ul>

    <!-- Balance -->
    <h2>Settlements</_titles: Balances</h2>
    <ul id="balanceList">
      <% balances.forEach(balance => { %>
        <li>
          <%= balance.from %> owes <%= balance.to %> ₹<%= balance.amount.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) %>
        </li>
      <% }) %>
    </ul>
  </div>

  <script>
    // Add expense form submission
    document.getElementById('expenseForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const description = document.getElementById('description').value.trim();
      const amount = parseFloat(document.getElementById('amount').value);
      const paidBy = document.getElementById('paidBy').value.trim();
      const participants = document.getElementById('participants').value
        .split(',')
        .map(p => p.trim())
        .filter(user => user.length > 0)
        .map(user => ({ user }));

      // Client-side validation
      if (!description) {
        alert('Description is required');
        return;
      }
      if (isNaN(amount) || amount <= 0) {
        alert('Amount must be a positive number');
        return;
      }
      if (!paidBy) {
        alert('Paid by field is required');
        return;
      }
      if (participants.length === 0) {
        alert('At least one participant is required');
        return;
      }

      try {
        const response = await fetch('/api/expenses', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ description, amount, paidBy, participants })
        });
        
        if (response.ok) {
          window.location.reload();
        } else {
          const errorData = await response.json();
          alert(`Error adding expense: ${errorData.error || 'Unknown error'}`);
        }
      } catch (error) {
        console.error('Error adding expense:', error);
        alert('Failed to add expense. Please try again.');
      }
    });

    // Delete expense functionality
    document.querySelectorAll('.delete-btn').forEach(button => {
      button.addEventListener('click', async () => {
        const expenseId = button.getAttribute('data-id');
        if (!expenseId) {
          alert('Invalid expense ID');
          return;
        }

        if (!confirm('Are you sure you want to delete this expense?')) {
          return;
        }

        try {
          const response = await fetch(`/api/expenses/${expenseId}`, {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' }
          });

          if (response.ok) {
            window.location.reload();
          } else {
            const errorData = await response.json();
            alert(`Error deleting expense: ${errorData.error || 'Unknown error'}`);
          }
        } catch (error) {
          console.error('Error deleting expense:', error);
          alert('Failed to delete expense. Please try again.');
        }
      });
    });
  </script>
</body>
</html>